import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/* 
문제
N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(1 ≤ N ≤ 10,000,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 
이 수는 10,000보다 작거나 같은 자연수이다.

출력
첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.

2) 유추파악
첫줄에 테스트 케이스 갯수 T가 주어지고 둘쨰줄에 정수가 한줄씩 T번 입력한다.
주어진 정수들을 다시 오름차순으로 한줄씩 출력하라

3) 주요 단어 이름 선정
테스트 케이스 갯수 : T

4)테스트 케이스
<출력>
10
5
2
3
1
4
2
3
5
1
7
-->
1
1
2
2
3
3
4
5
5
7

5)프로그래밍 순서
*Counting Array 사용
첫줄에 정수 T 입력 - 크기가 T인 배열 list_T 생성 - 크기가 10001인 배열 list_cnt 생성 - 
list_T에 정수를 한줄씩 T번 입력과 동시에 (정수-1)를 인덱스로 list_cnt의 값을 +1 추가
- list_cnt의 값이 0이 아닌 것만 한줄씩 (list_cnt값) 횟수만큼 출력, 

*/

public class Main {
    static BufferedReader br;
    static BufferedWriter bw;

    // 정수가 들어있는 배열을 넣으면 countingArray의 배열을 리턴해주는 함수
    static int[] countingArray(int[] list_T, int[] list_cnt) throws NumberFormatException, IOException{
        for(int i=0; i<list_T.length; i++){
            list_T[i] = Integer.parseInt(br.readLine()); //입력순서대로 배열에 입력
            list_cnt[list_T[i]-1]++;  // list_T-1의 값을 list_cnt의 인덱스로 정하여 값을 +1
        }
        return list_cnt;
    }

    // 정수 배열을 넣으면 값이 0인 것을 제외하고 인덱스를 데이터 값만큼 반복하여 출력하는 함수
    static void print(int[] list_cnt) throws IOException{
        for(int i=0; i<list_cnt.length; i++){
            if(list_cnt[i] != 0){  
                for(int j=0; j<list_cnt[i]; j++)
                bw.write((i+1)+"\n");
            }
        }
    }
    
	public static void main(String[] args) {
		br = new BufferedReader(new InputStreamReader(System.in));
		bw = new BufferedWriter(new OutputStreamWriter(System.out));

        try {
            int T = Integer.parseInt(br.readLine());
            int[] list_T = new int[T];
            int[] list_cnt = new int[10001];

            countingArray(list_T, list_cnt);
            
            print(list_cnt);

            bw.flush();
            br.close();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
}