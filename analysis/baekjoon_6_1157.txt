import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.HashMap;

/* 
1) 문제파악 
문제
알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.

입력
첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.

출력
첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.

2) 유추파악
문자열 입력 - 가장 많이 사용된 알파벳 출력, 갯수가 같은 알파벳 있다면 '?' 출력


3) 주요 단어 이름 선정
입력 str = input_str

4)테스트 케이스
<출력>
Mississipi
--> ?

zZa
--> Z

z
--> Z

baaa
--> 
A

5)프로그래밍 순서
문자열 str 입력 - 대문자 변환 - HashMap사용하여 알파벳 갯수 구하기 - 출력
*/

public class Main {
    public String A(String str){
        String input_str;
        input_str = str.toUpperCase();
        HashMap<String, Integer> hashMap = new HashMap<>();
        for(int i=0; i<input_str.length(); i++){
            if(hashMap.get(input_str.charAt(i)+"") !=null){ // key값이 null이 아닐때 value 값을 +1
            hashMap.put(input_str.charAt(i)+"", hashMap.get(input_str.charAt(i)+"")+1);
            } else{ hashMap.put(input_str.charAt(i)+"",1);}  // key값이 null 일때 value 값을 1
        }
        int max = Collections.max(hashMap.values());  // value 최대값 구하기
        int cnt =0;
        String findkey = "";
        for(String key : hashMap.keySet()){
            if(hashMap.get(key).equals(max)){  //  value 최대값의 key 구하기
            findkey = key;
            cnt ++; 
            }
            if(cnt >1) findkey = "?"; // value 최대값이 1개 이상인 경우
        }
        return findkey;
    }

    public static void main(String[] args) {     
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    
        try {
            Main main = new Main();
            String findkey = main.A(br.readLine());
            
            bw.write(findkey+"\n");
            br.close();
            bw.flush();
            bw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}